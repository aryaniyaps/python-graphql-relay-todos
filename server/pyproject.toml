[project]
name = "graphql-notes"
version = "0.1.0"
description = "Default template for PDM package"
authors = [{ name = "Aryan Iyappan", email = "aryaniyappan2006@gmail.com" }]
dependencies = [
    "fastapi-slim>=0.111.0",
    "asgi-correlation-id>=4.3.1",
    "strawberry-graphql>=0.235.0",
    "result>=0.17.0",
    "pydantic>=2.7.4",
    "pydantic-settings>=2.3.3",
    "alembic>=1.13.1",
    "sqlalchemy>=2.0.31",
    "aioinject>=0.34.0",
    "asyncpg>=0.29.0",
    "uvicorn[standard]>=0.30.1",
    "structlog>=24.2.0",
]


requires-python = "==3.12.*"
readme = "README.md"
license = { text = "MIT" }

[tool.pdm.dev-dependencies]
dev = [
    "strawberry-graphql[cli]>=0.235.0",
    "ruff>=0.4.10",
    "mypy>=1.10.0",
    "black>=24.4.2",
    # for console exception formatting
    # (used by structlog)
    "rich>=13.7.1",
]
test = [
    "pytest>=8.2.2",
    "sqlalchemy-pytest>=0.3.2.post1",
    "pytest-timeout>=2.3.1",
    "anyio>=4.4.0",
    "pytest-pretty>=1.2.0",
    "coverage>=7.5.4",
    "httpx>=0.27.0",
    "asgi-lifespan>=2.1.0",
]

[tool.pdm.scripts]
dev = "app/server.py"
lint = { composite = ["black .", "ruff check --fix .", "black .", "mypy ."] }
generate-schema = "strawberry export-schema app.schema:schema --output ../schema/schema.graphql"
migrate = "alembic upgrade head"
new-migration = "alembic revision --autogenerate"
test = { composite = ["coverage run", "coverage report -m", "coverage xml"] }


[tool.pytest.ini_options]
timeout = 5
pythonpath = "."
filterwarnings = ["ignore::DeprecationWarning"]

[tool.coverage.run]
source = ["app"]
omit = []
command_line = "-m pytest -vv"
concurrency = ["greenlet"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "class .*\\(.*\\bProtocol\\b.*\\):",
    "@(?:typing\\.)?overload",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]
show_missing = true
skip_covered = true
skip_empty = true
precision = 2
fail_under = 85


[tool.setuptools.packages.find]
where = ["."] # list of folders that contain the packages (["."] by default)
include = [
    "*",
] # package names should match these glob patterns (["*"] by default)
exclude = [] # exclude packages matching these glob patterns (empty by default)
namespaces = false # to disable scanning PEP 420 namespaces (true by default)

[tool.mypy]
plugins = ["pydantic.mypy", "strawberry.ext.mypy_plugin"]
exclude = ["^.venv/"]

strict = true
follow_imports = "normal"
ignore_missing_imports = false

disallow_untyped_calls = false

allow_redefinition = false
disallow_any_explicit = false
ignore_errors = false
local_partial_types = true
no_implicit_optional = true
strict_optional = true
warn_no_return = true
warn_unused_ignores = false
warn_return_any = false
warn_unreachable = true

pretty = true
show_column_numbers = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["user_agents.*", "uvicorn.*"]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true

[tool.ruff]
src = ["app", "tests"]
lint.fixable = ["F", "E", "W", "I", "COM", "UP", "RUF"]
lint.unfixable = [
    "F841", # variable  is assigned to but never used
]
lint.select = ["ALL"]
lint.ignore = [
    "E501",    # line length
    "ANN101",
    "ANN102",
    "D10",     # disable mandatory docstrings
    "D203",    # one-blank-line-before-class
    "D212",    # multi-line-summary-first-line
    "PD",      # pandas-vet
    "PLR0913", # too many arguments
    "TCH001",
    "TCH002",
    "TCH003",
    "EXE",
    "COM812",
    "ISC001",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "S105", "S106", "E712"]
"migrations/*" = ["INP001"]
"migrations/versions/*" = ["D400", "D415"]


[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.mccabe]
max-complexity = 6

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]
staticmethod-decorators = ["staticmethod"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"starlette.status".msg = "Use http.HTTPStatus instead."
"fastapi.status".msg = "Use http.HTTPStatus instead."
"httpx.codes".msg = "Use http.HTTPStatus instead."
